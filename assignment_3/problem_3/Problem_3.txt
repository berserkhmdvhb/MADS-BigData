############################################################################################
Big Data Analytics - Assignment 2

Group 3:
    Tom Deckenbrunnen
    Max Sinner
    Hamed Vaheb

Problem 3


Notes concerning our source files:
We provided all our source files as scripts for the spark-shell, which
is also the way that we executed them. All the source files are done
in such a way that the individual subtasks can be ran by using just the
code from the respective source file, ie. the necessary code from
subtask (a) is also included in the file for subtask (b).

This is the cluster configuration we used for this task:
srun -p batch --time=0XX:00:0 -N 2 -c 12 --pty bash -i
############################################################################################
Subtask (a)

The first subpoints asks to construct a graph from an edge- and vertex-RDD.
For this, we use the provided twitter_combined.txt file, which contains the edges for 
the whole graph, with the distinct vertex-IDS also contained in the file.
By combining these informations, we arrive at a non-labeled graph, on which we can however
carry out the following subpoints (b,c,d). 
In order to extract the unique vertex-IDs we use map and join operations, from which we 
then can extract the distinct the vertex-IDs.


Subtask (b)

In order to determine the connected componeents, we can use the function
.connectedComponents() that can be applied to a GRaphX graph object.

The number of connected components is 1, by construction of the graph from the 
twitter_combined file.


Subtask (c)

Degree distribution:
--------------------

The degrees.map(_._2).stats() returns the following:

(count: 81305, mean: 29.773888, stdev: 118.120080, max: 8660.000000, min: 1.000000)

All in all, we have 81305 vertices, as supported by counting the distinct ids in 
the twitter_combined-file. The stats()-function adds the mean number of connections
for all the vertices, as well as standard deviation, min and max.

Clustering Coefiicient:
-----------------------

Statistics on triangle counts in the graph:

(count: 81306, mean: 482.713674, stdev: 1650.142154, max: 96815.000000, min: 0.000000)

Clustering Coeff = 0.3521604553135813

This means that on average, neighbourhood is not very connected, as the value 
strongly deviates from the maximum of 1, which would mean that the graph would 
be fully connected.

Paths:
------

Using the provided code from the shell script for the medline data, we were not able to
rewrite it in a way that we could make it run, as it would just use too much memory.

Subtask (d)

Here I provide a section of the collected ranks from the pagerank in GRaphX:
Here the top 5 results:

(115485051,1057.391094059854)
(116485573,899.0037893134554)
(813286,212.4477132372893)
(40981798,206.53549452811208)
(11348282,191.76130915237894)

If we compare this to the top 5 ranks from a simple degree distribution:

(40981798,10336)
(43003845,9368)
(22462180,8324)
(34428380,8251)
(3359851,7359)

We can see that both methods differ in a factor 10. 
###############################################################################################
