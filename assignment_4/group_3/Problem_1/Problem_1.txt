############################################################################################
Big Data Analytics - Assignment 4

Group 3:
    Tom Deckenbrunnen
    Max Sinner
    Hamed Vaheb

Problem 1
############################################################################################
Subtask (a) (b)

Using the functions and variables defined in the "RunTaxiTrips-shell.scala", we first load 
and parse both NYC Taxi Trips and GeoJSON files, then filter unwanted data (such as bugging
trips, trips with unusual duration, i.e., less than zero or more than four hours, or trips 
in which the GPS was being faulty). We then combine polygons and taxi trips using "borough"
function.

First we report the values that we obtained for details of the taxi trips based
on the whole data, which we ran on the cluster:

                                                                                
14776529 taxi trips parsed.

87 taxi trips dropped.


Distribution of trip durations in hours:

scala> taxiGood.values.map(getHours).countByValue()
                .toList.sorted.foreach(println)
(-8,1)                                                                          
(0,14752245)
(1,22933)
(2,842)
(3,197)
(4,86)
(5,55)
(6,42)
(7,33)
(8,17)
(9,9)
(10,10)
(11,13)
(12,7)
(13,5)
(14,5)
(15,3)
(16,5)
(17,3)
(19,2)
(20,2)
(24,2)
(25,1)
(26,1)
(28,1)
(30,1)
(51,1)
(168,2)
(336,1)
(504,4)


Distribution of trips per borough:

scala> taxiClean.values.map(borough).countByValue().foreach(println)
(Some(Staten Island),3338)                                                      
(Some(Queens),672135)
(Some(Manhattan),12978954)
(Some(Bronx),67421)
(Some(Brooklyn),715235)
(None,338937)





Now, we will approach the problem by defining two RDDs "diffLocs" and "eqLocs".
Both RDDs have the type RDD[(String, TaxiTrip)].
In the former, we store trips that have the same (equal) location for pickupLoc 
and dropoffLoc values of that trip. In the latter, we do the same for trips with 
different locations. In below we report the count of the aforementioned RDDs:


scala> taxiDone.count()
res12: Long = 14494791                                                          

scala> diffLocs.count()
res13: Long = 14328981                                                          

scala> eqLocs.count()
res14: Long = 165810    



Afterwards, we fetch duration of all trips inside both RDDs using the "getHours" 
function, and store them in "diffTripDurations" and "eqTripDurations", which 
correspond to "diffLocs" and "eqLocs" RDDs respectively. 

Using the final RDDs, we then compute statistics (count, sum, average) for duration 
of the trips of of both RDDs:

(i) for diffTripLocs:
 diffTripDurations.count
res17: Long = 14328981                                                          

scala> diffTripDurations.sum
res18: Double = 23851.0                                                         

scala> diffTripDurations.mean
res19: Double = 0.0016645286918867503 

(ii) for eqTripsLocs:

scala> eqTripDurations.count
res20: Long = 165810                                                            

scala> eqTripDurations.sum
res21: Double = 138.0                                                           

scala> eqTripDurations.mean
res22: Double = 8.322779084494316E-4     






#################################################################################################
Subtask (c) (d)

We reaeat a similar procedure as that used in subtasks (a), (b). In order to report the statistics
for boroughs and days, we pursue the following strategy:

(i) report durations' statistics based on boroughs

For this we construct two RDDs of type RDD[(Option[String], Long)], with names "durationBoroughsDiff" 
and "durationBoroughsEq", in which we store  both boroughs and hours of trips in the following format:
(borough(trips), getHours(trips))

The former corresponds to trips with different locations for pickupLoc and dropoffLoc and the latter
is the opposite.

We then group the RDDs by keys (boroughs) and aggregate (count, sum, average) by values (hours of trips).
We report the results of applying the strategy on the whole dataset:

  (i-i) For RDD containing trips that have different locations for pickupLoc and dropoffLoc values of that trip:

    **count**

    scala> durationDaysDiff.groupByKey().count()
    res25: Long = 6                                                                  

    **sum**

    scala> sumByBoroughsDiff.collect().foreach(println)
    (Some(Queens),6115)                                                             
    (Some(Manhattan),12811)
    (Some(Staten Island),158)
    (None,1374)
    (Some(Bronx),418)
    (Some(Brooklyn),2975)


    **average**
    
    scala> avgByBoroughsDiff.collect().foreach(println)
    (Some(Queens),0.009483472)                                                      
    (Some(Manhattan),9.966028E-4)
    (Some(Staten Island),0.053324334)
    (None,0.023965674)
    (Some(Bronx),0.006476804)
    (Some(Brooklyn),0.0042218165)






  (i-ii) For RDD containing trips that have the same location for pickupLoc and dropoffLoc values of that trip:
    
    **count**

    scala> durationDaysEq.groupByKey().count()
    res25: Long = 6                                                                  

    **sum**

    scala> sumByBoroughsEq.collect().foreach(println)
    (Some(Queens),57)                                                               
    (Some(Manhattan),54)
    (Some(Staten Island),0)
    (None,3)
    (Some(Bronx),2)
    (Some(Brooklyn),22)


    **average**
    
    scala> avgByBoroughsEq.collect().foreach(println)
    (Some(Queens),0.0021764033)                                                     
    (Some(Manhattan),4.5634317E-4)
    (Some(Staten Island),0.0)
    (None,3.7401821E-4)
    (Some(Bronx),7.155635E-4)
    (Some(Brooklyn),0.0021777865)




Note that for average we mapped and reduced RDD by their counts and sums, so that we have a tuple 
of (sum, count). We then convert sum to float and then divide it by count.

(ii) report durations' statistics based on days
Akin to the strategy used in (i), we define two RDDs, "durationDaysDiff" and "durationDaysEq", in 
in which we store both days of week and hours of trips in the following format:
(trips.pickupTime.getDayOfWeek, getHours(trips)). Again, we report the statistics for the duration:

  (ii-i): For RDD containing trips that have different locations for pickupLoc and dropoffLoc values of that trip:


    **count**

    scala> durationDaysDiff.groupByKey().count()
    res33: Long = 7                                                                   


    **sum**

    scala> sumByDaysDiff.collect().foreach(println)
    (1,2651)                                                                        
    (2,2711)
    (3,3695)
    (4,5523)
    (5,5240)
    (6,2308)
    (7,1723)



    **average**
    scala> avgByDaysDiff.collect().foreach(println)
    (1,0.0016207901)                                                                
    (2,0.0012023064)
    (3,0.0016194059)
    (4,0.002273586)
    (5,0.0025975364)
    (6,0.0011608618)
    (7,0.0010004941)



  (ii-ii): For RDD containing trips that have the same location for pickupLoc and dropoffLoc values of that trip:


    **count**
    
    scala> durationDaysEq.groupByKey().count()
    res36: Long = 7                                                                  


    **sum**

    scala> sumByDaysEq.collect().foreach(println)
    (1,20)                                                                          
    (2,21)
    (3,25)
    (4,36)
    (5,17)
    (6,13)
    (7,6)




    **average**
    scala> avgByDaysEq.collect().foreach(println)
    (1,0.0010660413)                                                                
    (2,8.1575575E-4)
    (3,9.316539E-4)
    (4,0.0012456748)
    (5,7.2814495E-4)
    (6,5.744587E-4)
    (7,3.0620056E-4)

From the reported values, we conclude that the busiest borough and busiest days are the following:

(i) For RDD containing trips that have different locations for pickupLoc and dropoffLoc values of that trip:
    busiest borough: Manhattan
    busiest day: 4 = THURSDAY
    
(ii) For RDD containing trips that have the same location for pickupLoc and dropoffLoc values of that trip:
    busiest borough: Queens
    busiest day: 4 = THURSDAY





#################################################################################################
Subtask (e)

In order to compute average duration and also other statistics of duration between two subsequent 
trips conducted by the taxi driver, we modified the provided script in the following manner:
We defined the "hourBoroughDuration" function which maps two trips to (b, h, d), where "b" is the 
borough of the trips, "h" is the hour of the day, and "d" is duration.

Then, we defined "hourBoroughDurations", in which we slide through the durations and compute 
"hourBoroughDuration". Finally we report wait-times per borough and per dayhour, as well as 
statistics of wait hours per borough and per dayhour.




#################################################################################################
subtask (f)

In order to normalize trips, we first have to implement Haversine distance, which we did by defining
a "DistanceCalculatorImpl" class. For testing this distance, I ran it on two simple points as the 
following:

new DistanceCalculatorImpl().calculateDistanceInKilometer(Location(10, 20), Location(40, 20))
res53: Int = 3335

Now we define a "getMins" function which is akin to "getHours" defined before but insetad it takes 
minutes instead of hours.

Next, we define a RDD "durationDayhoursNorm", in which we fetch (X,Y) coordinates of both pickupLoc and 
dropoffLoc so as to calculate Haversine distance between the locations. We then store the distance 
in "dist" variable. Then, we normalize the durations (in time unit) by the distance (in space unit).
We store normalized distances in "durationNorm". Finally, We map the trips to 
(trips.pickupTime.getHourOfDay, durationNorm)
The first element of the output pair is dayhour of the trip, and second element is the normalized 
durations.

At the end, we compute the average of "durationDayhoursNorm" grouped by the dayhour, and sorted 
in descending order.

Note: We ran subtasks (a) (b) (c) (d) on the cluster using the whole dataset and reported results. 
But for (e) (f) we ran on local machine. 
on sample of dataset. 
