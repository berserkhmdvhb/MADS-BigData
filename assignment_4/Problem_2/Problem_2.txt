This text file contains information on how our group solved Problem 2 from Homework Sheet 4.

(a) We use the case class (as a normal class does not work) to define the Collisionsclass, and used a similarily define parsing function as the one provided
on Moodle. The difference here is that we used for instance an additional jar-file for the formating of the location data.
We pass the csv from moodle thourgh an RDD transformation pipeline to receive the RDD with data that we want to analyze.
For the parsing function, we use time and date formatters to get a nicely readable output for the subpoint c when checking
the date and times at which most accidents happen. Additionally, we write a condition to not get empty entries for the injured/killed 
columns, so that we can count of injured/killed people.

The CSV file is loaded using a Spark context, and we use our defined parsing function to get an RDD with the desired information for our subsequent tasks.
In this form, the entries of the RDD have the follwoing shape:

Example: 

Collision(2013-01-01,05:43:00.000,2013-01-01T05:43:00.000+01:00,BROOKLYN,40.6962076,-73.9615863,com.esri.core.geometry.Point@79911d48,CLASSON AVENUE,PARK AVENUE,,1,0,Alcohol Involvement,Unspecified,PASSENGER VEHICLE,PASSENGER VEHICLE)


(b) In order to find the most dangerous streets in terms of injured and killed people, we first try to determine the factors
of both concerned parties. These indicate (if stated) the reason for the accident, for instance if traffic control was misregarded,
or slippery streets etc. As these factors exist for both parties, we first collect and RDD for the factors of party 1 involved in the accident,
and move then to the factors for party 2 vinvolved, and join the two RDDs.

As we want to rank the top 25 most dangerous crossings, we use a map on our initial collisions RDD to
collect the crossings (borough, onstreetName, crossStreetName) from all the collisions.
The subsequent RDD transformations are used to get the right form in order to join the RDDs for the factors (take top 5) and the crossings.
Finally we list the top 25 most dangerous crossings.

Example of collected crossings:

((BRONX,BUSSING AVENUE,DIGNEY AVENUE),(9,List((DIGNEY AVENUE,2))))


(c) In order to collect the date and times at which most of the collisions occured, we first defined the collisiontimes-RDD which contains the tuple (date,time) along with
the number of people injured and killed in the collisions.
In the same structure as the previous point, we collect the factors of the two parties from the collisions at the same day and time, which is defined by timefactors in our code.
Then we reshape the structure of the timefactors RDD to fit the timecollisions RDD structure to join both, and we collect outputs of the following structure:

Example:

((2013-01-28,18:30:00.000),(9,List((Unspecified,9), (Driver Inattention/Distraction,2), (Pavement Slippery,1), (Traffic Control Disregarded,1), (,1))))


(d)In order to collect the most inbvolved vehicles, we again collect the vehicles of involvee 1 and the vehicle of involve 2.
We create an RDD for both, and jopin the two RDDs, and reduce them by key, in order to get the count of distinct occurences.
The top 5 vehicles are the following:

(PASSENGER VEHICLE,2763)
(SPORT UTILITY / STATION WAGON,1128)
(,1063)
(TAXI,246)
(UNKNOWN,226)



(e) Subpoint (e) treats the same tasks as the previous subpoints b-d, but seperates injured form the death cases:
As the same code is applied except for the killed/injured counts in the original RDD structure, I will list examples ofthe outputs tompoint out differences:
Example of code:

val crossings_injured = collisions.map(coll => ((coll.borough, coll.onStreetName, coll.crossStreetName), coll.numberOfPersonsInjured)).reduceByKey(_ + _)
val crossings_killed = collisions.map(coll => ((coll.borough, coll.onStreetName, coll.crossStreetName), coll.numberOfPersonsKilled)).reduceByKey(_ + _)


Example of results:


(e) (b)
Injured:

((BRONX,BUSSING AVENUE,DIGNEY AVENUE),(9,List((DIGNEY AVENUE,2))))
((BROOKLYN,LINDEN BOULEVARD,ROCKAWAY AVENUE),(9,List((ROCKAWAY AVENUE,8), (ROCKAWAY AVENUE,2), (ROCKAWAY AVENUE,2))))


Killed:

((BROOKLYN,AVENUE U,EAST 5 STREET),(3,List((EAST 5 STREET,1), (EAST 5 STREET,1))))
((QUEENS,SOUTH CONDUIT AVENUE,75 STREET),(1,List((75 STREET,1), (75 STREET,1))))


(e) (c)

Injured:

((2013-01-01,01:35:00.000),(9,List((Unspecified,2))))
((2013-01-28,18:30:00.000),(9,List((Unspecified,9), (Driver Inattention/Distraction,2), (Pavement Slippery,1), (Traffic Control Disregarded,1), (,1))))


Killed:

((2013-01-05,02:08:00.000),(3,List((Traffic Control Disregarded,1), (Unspecified,1))))
((2013-01-26,15:20:00.000),(1,List((,2), (Unspecified,1), (Following Too Closely,1))))


(e) (d)

Injured:

(PASSENGER VEHICLE,2748)
(SPORT UTILITY / STATION WAGON,1117)
(,1042)
(TAXI,244)
(UNKNOWN,225)



Killed:

(,21)
(PASSENGER VEHICLE,15)
(SPORT UTILITY / STATION WAGON,11)
(TAXI,2)
(BUS,1)


















